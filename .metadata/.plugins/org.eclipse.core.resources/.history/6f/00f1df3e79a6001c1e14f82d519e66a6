package com.itsone.igm.contr.file;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.itsone.igm.contr.err.ExpectedException;
import com.itsone.igm.helper.DataHelper;
import com.itsone.igm.helper.SysHelper;
import com.itsone.igm.service.KeyService;

@RestController
@RequestMapping("/igm/")
public class FileDlCntr {

	private static final Logger logger = LoggerFactory.getLogger(FileDlCntr.class);
	
	@Autowired private KeyService keyService;
	
	@Transactional
	@RequestMapping("cm/reqDl")
	public void reqCmDl(HttpServletRequest request, HttpServletResponse response) throws IOException {
		keyService.checkTicket(request, null, new Object(){}.getClass().getEnclosingMethod().getName());
		
		String cdDiv = request.getParameter("cdDiv");
		String coDiv = request.getParameter("coDiv");
		String ver = request.getParameter("ver");
		
		if (cdDiv == null || cdDiv.isEmpty() 
				|| coDiv == null || coDiv.isEmpty()) {
			throw ExpectedException.FAIL_ERR_NOT_ENOUGH_PARAM;
		}
		
		String rangeHeader = request.getHeader("Range");
		
		String filePathStr = "";
		
		if (ver == null || ver.isEmpty()) {
			filePathStr = SysHelper.inst().filePath + DataHelper.inst().retFileSubPath(cdDiv) + coDiv + "/data_all.zip";
			
			logger.info("FileDlCntr1 >> filePathStr : " + filePathStr);
		} else {
			// 버전 비교해서 낮으면 
			
			ver = ver.replace(".", "");
			filePathStr = SysHelper.inst().filePath + DataHelper.inst().retFileSubPath(cdDiv) + coDiv + "/data_" + ver + ".zip";
			logger.info("FileDlCntr2 >> filePathStr : " + filePathStr);
		}
		
		try {
			OutputStream os = response.getOutputStream();
            long rangeStart = 0;
            long rangeEnd;
            
            Path filePath = Paths.get(filePathStr);
            long fileSize = Files.size(filePath);
            
            byte[] buffer = new byte[1024];
            
            RandomAccessFile file = new RandomAccessFile(filePathStr, "r");
            if (rangeHeader == null) {
        		File f = new File(filePathStr);
        		String mimeType = URLConnection.guessContentTypeFromName(f.getName());
    			if (mimeType == null) {
    				mimeType = "application/octet-stream";
    			}
    			response.setContentType(mimeType);
    			response.setContentLength((int)fileSize);
                response.setStatus(HttpStatus.OK.value());
                long pos = rangeStart;
                file.seek(pos);
                while (pos < fileSize - 1) {
                    file.read(buffer);
                    os.write(buffer);
                    pos += buffer.length;
                    logger.info("reqDl1 >> pos : " + pos);
                }
                
                os.flush();
                if (file != null) file.close();
                return;
            }
        	
        	String[] ranges = rangeHeader.split("-");
            rangeStart = Long.parseLong(ranges[0].substring(6));
            if (ranges.length > 1) {
                rangeEnd = Long.parseLong(ranges[1]);
            } else {
                rangeEnd = fileSize - 1;
            }
            
            if (fileSize < rangeEnd) {
                rangeEnd = fileSize - 1;
            }
            
            int contentLength = (int) ((rangeEnd - rangeStart) + 1);
            response.setContentLength(contentLength);
            response.setHeader("Accept-Ranges", "bytes");
            response.setHeader("Content-Range", "bytes" + " " + rangeStart + "-" + rangeEnd + "/" + fileSize);
            response.setStatus(HttpStatus.PARTIAL_CONTENT.value());

            long pos = rangeStart;
            file.seek(pos);
            while (pos < rangeEnd) {                    
                file.read(buffer);
                os.write(buffer);
                pos += buffer.length;
                logger.info("reqDl2 >> pos : " + pos);
            }
            
            if (os != null) os.flush();
            if (file != null) file.close();
            
		} catch (FileNotFoundException e) {
            response.setStatus(HttpStatus.NOT_FOUND.value());
            logger.info("reqDl >> FileNotFoundException >> response : " + response.getStatus());
        } catch (IOException e) {
            response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            logger.info("reqDl >> IOException >> response : " + response.getStatus());
        }
	}
	
	
	@RequestMapping("d/empl_photo/{cd}/{rndId}")
	public void downloadEmplPhoto(HttpServletRequest request, 
										HttpServletResponse response,
										@PathVariable("cd") String cd,
										@PathVariable("rndId") String rndId) throws IOException {
		
		String filePath = SysHelper.inst().filePath + FileUlCntr.PART_NAME_EMPL_PATH + cd + "/" + rndId + "/" + "photo.jpg";
		
		File file = new File(filePath);
		
		if (file.exists()) {
		
			String mimeType = URLConnection.guessContentTypeFromName(file.getName());
			if (mimeType == null)  mimeType = "application/octet-stream";

			response.setContentType(mimeType);
			response.setHeader("Content-Disposition", String.format("inline; filename=\"" + file.getName() + "\""));
			response.setContentLength((int) file.length());

			InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
			
			FileCopyUtils.copy(inputStream, response.getOutputStream());
		}
	}
	
	@RequestMapping("d/empl_photo_thumb/{cd}/{rndId}")
	public void downloadEmplPhotoThumb(HttpServletRequest request, 
										HttpServletResponse response,
										@PathVariable("cd") String cd,
										@PathVariable("rndId") String rndId) throws IOException {
		
		String filePath = SysHelper.inst().filePath + FileUlCntr.PART_NAME_EMPL_PATH + cd + "/" + rndId + "/" + "photo.jpg";
		
		File file = new File(filePath);
		
		if (file.exists()) {
		
			String mimeType = URLConnection.guessContentTypeFromName(file.getName());
			if (mimeType == null)  mimeType = "application/octet-stream";

			response.setContentType(mimeType);
			response.setHeader("Content-Disposition", String.format("inline; filename=\"" + file.getName() + "\""));
			response.setContentLength((int) file.length());

			InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
			
			FileCopyUtils.copy(inputStream, response.getOutputStream());
		}
	}
	
}
